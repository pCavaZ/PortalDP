// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalDP.Infrastructure.Data;

#nullable disable

namespace PortalDP.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortalDP.Domain.Entities.ClassCancellation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CancelledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("ClassDate")
                        .HasColumnType("date");

                    b.Property<int>("OriginalScheduleId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassDate")
                        .HasDatabaseName("IX_ClassCancellations_Date");

                    b.HasIndex("OriginalScheduleId");

                    b.HasIndex("StudentId", "ClassDate")
                        .IsUnique()
                        .HasDatabaseName("IX_ClassCancellations_Student_Date");

                    b.ToTable("ClassCancellations");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.RecoveryClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("ClassDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<int>("OriginalCancellationId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalCancellationId")
                        .IsUnique()
                        .HasDatabaseName("IX_RecoveryClasses_OriginalCancellation");

                    b.HasIndex("StudentId", "ClassDate")
                        .HasDatabaseName("IX_RecoveryClasses_Student_Date");

                    b.HasIndex("ClassDate", "StartTime", "EndTime")
                        .HasDatabaseName("IX_RecoveryClasses_TimeSlot");

                    b.ToTable("RecoveryClasses");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeek", "StartTime", "EndTime")
                        .HasDatabaseName("IX_Schedules_TimeSlot");

                    b.HasIndex("StudentId", "DayOfWeek", "IsActive")
                        .HasDatabaseName("IX_Schedules_Student_Day_Active");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3485),
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3488),
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3490),
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0),
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3491),
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3493),
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            StudentId = 5
                        });
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DNI")
                        .IsUnique()
                        .HasDatabaseName("IX_Students_DNI");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Students_IsActive");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3448),
                            DNI = "12345678A",
                            Email = "maria.garcia@email.com",
                            IsActive = true,
                            Name = "María García López",
                            Phone = "666123456",
                            UpdatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3449)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3452),
                            DNI = "87654321B",
                            Email = "ana.lopez@email.com",
                            IsActive = true,
                            Name = "Ana López Martín",
                            Phone = "666654321",
                            UpdatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3453)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3455),
                            DNI = "11223344C",
                            Email = "carmen.ruiz@email.com",
                            IsActive = true,
                            Name = "Carmen Ruiz Sánchez",
                            Phone = "666112233",
                            UpdatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3455)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3457),
                            DNI = "55667788D",
                            Email = "marta.sanchez@email.com",
                            IsActive = true,
                            Name = "Marta Sánchez Rodríguez",
                            Phone = "666556677",
                            UpdatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3458)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3459),
                            DNI = "99887766E",
                            Email = "rosa.martin@email.com",
                            IsActive = true,
                            Name = "Rosa Martín González",
                            Phone = "666998877",
                            UpdatedAt = new DateTime(2025, 7, 4, 22, 1, 35, 245, DateTimeKind.Utc).AddTicks(3460)
                        });
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TimeSlots_IsActive");

                    b.HasIndex("DayOfWeek", "StartTime", "EndTime")
                        .IsUnique()
                        .HasDatabaseName("IX_TimeSlots_DayTime");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsActive = true,
                            MaxCapacity = 10,
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.ClassCancellation", b =>
                {
                    b.HasOne("PortalDP.Domain.Entities.Schedule", "OriginalSchedule")
                        .WithMany("ClassCancellations")
                        .HasForeignKey("OriginalScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ClassCancellations_Schedules");

                    b.HasOne("PortalDP.Domain.Entities.Student", "Student")
                        .WithMany("ClassCancellations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClassCancellations_Students");

                    b.Navigation("OriginalSchedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.RecoveryClass", b =>
                {
                    b.HasOne("PortalDP.Domain.Entities.ClassCancellation", "OriginalCancellation")
                        .WithMany("RecoveryClasses")
                        .HasForeignKey("OriginalCancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RecoveryClasses_ClassCancellations");

                    b.HasOne("PortalDP.Domain.Entities.Student", "Student")
                        .WithMany("RecoveryClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecoveryClasses_Students");

                    b.Navigation("OriginalCancellation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("PortalDP.Domain.Entities.Student", "Student")
                        .WithMany("Schedules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.ClassCancellation", b =>
                {
                    b.Navigation("RecoveryClasses");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("ClassCancellations");
                });

            modelBuilder.Entity("PortalDP.Domain.Entities.Student", b =>
                {
                    b.Navigation("ClassCancellations");

                    b.Navigation("RecoveryClasses");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
